	/**
	 * Configure the API client with the required credentials.
	 *
	 * Requires a settings array to be passed in with the following keys:
	 *
	 * - store_url
	 * - username
	 * - api_key
	 *
	 * @param array $settings
	 */
	public static function configure(array $settings)



	/**
	 * Configure the API client to throw exceptions when HTTP errors occur.
	 *
	 * Note that network faults will always cause an exception to be thrown.
	 */
	public static function failOnError($option=true)



	/**
	 * Return XML strings from the API instead of building objects.
	 */
	public static function useXml()



	/**
	 * Switch SSL certificate verification on requests.
	 */
	public static function verifyPeer($option=false)
	{
		self::connection()->verifyPeer($option);
	}



	/**
	 * Connect to the internet through a proxy server.
	 *
	 * @param string $host host server
	 * @param string $port port
	 */
	public static function useProxy($host, $port=false)




	/**
	 * Get error message returned from the last API request if
	 * failOnError is false (default).
	 *
	 * @return string
	 */
	public static function getLastError()



	/**
	 * Get an instance of the HTTP connection object. Initializes
	 * the connection if it is not already active.
	 *
	 * @return BigCommerce_Api_Connection
	 */
	private static function connection()




	/**
	 * Get a collection result from the specified endpoint.
	 *
	 * @param string $path api endpoint
	 * @param string $resource resource class to map individual items
	 * @param array $fields additional key=>value properties to apply to the object
	 * @return mixed array|string mapped collection or XML string if useXml is true
	 */
	public static function getCollection($path, $resource='Resource')






	/**
	 * Get a resource entity from the specified endpoint.
	 *
	 * @param string $path api endpoint
	 * @param string $resource resource class to map individual items
	 * @return mixed BigCommerce_ApiResource|string resource object or XML string if useXml is true
	 */
	public static function getResource($path, $resource='Resource')



	/**
	 * Get a count value from the specified endpoint.
	 *
	 * @param string $path api endpoint
	 * @return mixed int|string count value or XML string if useXml is true
	 */
	public static function getCount($path)




	/**
	 * Send a post request to create a resource on the specified collection.
	 *
	 * @param string $path api endpoint
	 * @param mixed $object object or XML string to create
	 */
	public static function createResource($path, $object)




	/**
	 * Send a put request to update the specified resource.
	 *
	 * @param string $path api endpoint
	 * @param mixed $object object or XML string to update
	 */
	public static function updateResource($path, $object)




	/**
	 * Send a delete request to remove the specified resource.
	 *
	 * @param string $path api endpoint
	 */
	public static function deleteResource($path)




	/**
	 * Internal method to wrap items in a collection to resource classes.
	 *
	 * @param string $resource name of the resource class
	 * @param array $object object collection
	 * @return array
	 */
	private static function mapCollection($resource, $object)




	/**
	 * Callback for mapping collection objects resource classes.
	 *
	 * @param stdClass $object
	 * @return BigCommerce_Api_Resource
	 */
	private static function mapCollectionObject($object)




	/**
	 * Map a single object to a resource class.
	 *
	 * @param string $resource name of the resource class
	 * @param stdClass $object
	 * @return BigCommerce_Api_Resource
	 */
	private static function mapResource($resource, $object)




	/**
	 * Map object representing a count to an integer value.
	 *
	 * @param stdClass $object
	 * @return int
	 */
	private static function mapCount($object)




	/**
	 * Pings the time endpoint to test the connection to a store.
	 *
	 * @return DateTime
	 */
	public static function getTime()




	/**
	 * Returns the default collection of products.
	 *
	 * @param array $filter
	 * @return mixed array|string list of products or XML string if useXml is true
	 */
	public static function getProducts($filter=false)



	/**
	 * Returns the total number of products in the collection.
	 *
	 * @return mixed int|string number of products or XML string if useXml is true
	 */
	public static function getProductsCount()





	/**
	 * Returns a single product resource by the given id.
	 *
	 * @param int $id product id
	 * @return BigCommerce_Api_Product|string
	 */
	public static function getProduct($id)





	/**
	 * Create a new product.
	 *
	 * @param mixed $object fields to create
	 */
	public static function createProduct($object)




	/**
	 * Update the given product.
	 *
	 * @param int $id product id
	 * @param mixed $object fields to update
	 */
	public static function updateProduct($id, $object)




	/**
	 * Delete the given product.
	 *
	 * @param int $id product id
	 */
	public static function deleteProduct($id)





	/**
	 * Return the collection of options.
	 *
	 * @param array $filter
	 * @return array
	 */
	public static function getOptions($filter=false)




	/**
	 * Return the number of options in the collection
	 *
	 * @return int
	 */
	public static function getOptionsCount()




	/**
	 * Return a single option by given id.
	 *
	 * @param int $id option id
	 * @return BigCommerce_Api_Option
	 */
	public static function getOption($id)




	/**
	 * Delete the given option.
	 *
	 * @param int $id option id
	 */
	public static function deleteOption($id)




	/**
	 * Return a single value for an option.
	 *
	 * @param int $option_id option id
	 * @param int $id value id
	 * @return BigCommerce_Api_OptionValue
	 */
	public static function getOptionValue($option_id, $id)




	/**
	 * Return the collection of all option values.
	 *
	 * @param mixed $filter
	 * @return array
	 */
	public static function getOptionValues($filter=false)




	/**
	 * The collection of categories.
	 *
	 * @param mixed $filter
	 * @return array
	 */
	public static function getCategories($filter=false)




	/**
	 * The number of categories in the collection.
	 *
	 * @return int
	 */
	public static function getCategoriesCount()




	/**
	 * A single category by given id.
	 *
	 * @param int $id category id
	 * @return BigCommerce_Api_Category
	 */
	public static function getCategory($id)




	/**
	 * Create a new category from the given data.
	 *
	 * @param mixed $object
	 */
	public static function createCategory($object)




	/**
	 * Update the given category.
	 *
	 * @param int $id category id
	 * @param mixed $object
	 */
	public static function updateCategory($id, $object)




	/**
	 * Delete the given category.
	 *
	 * @param int $id category id
	 */
	public static function deleteCategory($id)




	/**
	 * The collection of brands.
	 *
	 * @param mixed $filter
	 * @return array
	 */
	public static function getBrands($filter=false)




	/**
	 * The total number of brands in the collection.
	 *
	 * @return int
	 */
	public static function getBrandsCount()




	/**
	 * A single brand by given id.
	 *
	 * @param int $id brand id
	 * @return BigCommerce_Api_Brand
	 */
	public static function getBrand($id)




	/**
	 * Create a new brand from the given data.
	 *
	 * @param mixed $object
	 */
	public static function createBrand($object)




	/**
	 * Update the given brand.
	 *
	 * @param int $id brand id
	 * @param mixed $object
	 */
	public static function updateBrand($id, $object)




	/**
	 * Delete the given brand.
	 *
	 * @param int $id brand id
	 */
	public static function deleteBrand($id)




	/**
	 * The collection of orders.
	 *
	 * @param mixed $filter
	 * @return array
	 */
	public static function getOrders($filter=false)




	/**
	 * The number of orders in the collection.
	 *
	 * @return int
	 */
	public static function getOrdersCount()




	/**
	 * A single order.
	 *
	 * @param int $id order id
	 * @return BigCommerce_Api_Order
	 */
	public static function getOrder($id)




	/**
	 * Delete the given order (unlike in the Control Panel, this will permanently
	 * delete the order).
	 *
	 * @param int $id order id
	 */
	public static function deleteOrder($id)





	/**
	 * The list of customers.
	 *
	 * @param mixed $filter
	 * @return array
	 */
	public static function getCustomers($filter=false)




	/**
	 * The total number of customers in the collection.
	 *
	 * @return int
	 */
	public static function getCustomersCount()




	/**
	 * A single customer by given id.
	 *
	 * @param int $id customer id
	 * @return BigCommerce_Api_Customer
	 */
	public static function getCustomer($id)




	/**
	 * A list of addresses belonging to the given customer.
	 *
	 * @param int $id customer id
	 * @return array
	 */
	public static function getAddresses($id)




	/**
	 * Returns the collection of option sets.
	 *
	 * @param array $filter
	 * @return array
	 */
	public static function getOptionSets($filter=false)




	/**
	 * Returns the total number of option sets in the collection.
	 *
	 * @return int
	 */
	public static function getOptionSetsCount()




	/**
	 * A single option set by given id.
	 *
	 * @param int $id option set id
	 * @return BigCommerce_Api_OptionSet
	 */
	public static function getOptionSet($id)




	/**
	 * Status codes used to represent the state of an order.
	 *
	 * @return array
	 */
	public static function getOrderStatuses()




	/**
	 * The request logs with usage history statistics.
	 */
	public static function getRequestLogs()




	/**
	 * The number of requests remaining at the current time. Based on the
	 * last request that was fetched within the current script. If no
	 * requests have been made, pings the time endpoint to get the value.
	 *
	 * @return int
	 */
	public static function getRequestsRemaining()
